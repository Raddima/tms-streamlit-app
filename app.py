# –ë–ª–æ–∫ 1: –Ü–º–ø–æ—Ä—Ç –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import streamlit as st
import pandas as pd
import googlemaps
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import folium
from streamlit_folium import st_folium
import time
import polyline
import database as db
from datetime import time as dt_time, datetime, timedelta
from io import BytesIO


# –ë–ª–æ–∫ 2: –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ API (–∑–º—ñ–Ω–∏ —Ç—ñ–ª—å–∫–∏ –≤ get_solution_routes)
def get_api_data(api_key, locations_df, use_traffic):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ Google Maps API, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ–ø—Ü—ñ—é —Ç—Ä–∞—Ñ—ñ–∫—É."""
    try:
        gmaps = googlemaps.Client(key=api_key)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ Google Maps: {e}"); return None, None, None, None

    with st.spinner("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç..."):
        coords, addresses = [], locations_df['address'].tolist()
        for address in addresses:
            try:
                geocode_result = gmaps.geocode(address)
                if not geocode_result: st.error(
                    f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {address}"); return None, None, None, None
                location = geocode_result[0]['geometry']['location']
                coords.append((location['lat'], location['lng']));
                time.sleep(0.05)
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è '{address}': {e}"); return None, None, None, None
    locations_df['lat'], locations_df['lon'] = [c[0] for c in coords], [c[1] for c in coords]

    with st.spinner("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ç—Ä–∏—Ü—å –≤—ñ–¥—Å—Ç–∞–Ω–µ–π —Ç–∞ —á–∞—Å—É..."):
        try:
            departure_time = 'now' if use_traffic else None
            matrix_result = gmaps.distance_matrix(origins=coords, destinations=coords, mode="driving",
                                                  departure_time=departure_time)
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ: {e}"); return None, None, None, None

    distance_matrix, duration_matrix = [], []
    for row in matrix_result['rows']:
        dist_row, dur_row = [], []
        for element in row['elements']:
            dist_row.append(element['distance']['value'] if element['status'] == 'OK' else 9999999)
            duration_key = 'duration_in_traffic' if 'duration_in_traffic' in element else 'duration'
            dur_row.append(element[duration_key]['value'] if element['status'] == 'OK' else 9999999)
        distance_matrix.append(dist_row);
        duration_matrix.append(dur_row)

    return gmaps, locations_df, distance_matrix, duration_matrix


def create_data_model(locations_df, vehicles_df, distance_matrix, duration_matrix, service_time_seconds,
                      depot_working_hours):
    """–°—Ç–≤–æ—Ä—é—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –¥–ª—è —Ä–æ–∑–≤'—è–∑—É–≤–∞—á–∞ OR-Tools."""
    demands = [row['weight'] for _, row in locations_df.iterrows()]
    demands[0] = 0

    data = {
        'distance_matrix': distance_matrix, 'duration_matrix': duration_matrix,
        'demands': demands, 'vehicle_capacities': vehicles_df['capacity'].tolist(),
        'num_vehicles': len(vehicles_df), 'depot': 0,
        'location_names': locations_df['name'].tolist(),
        'vehicle_names': vehicles_df['name'].tolist(),
        'vehicle_fuel_consumptions': vehicles_df['fuel_consumption'].tolist(),
        'service_time': service_time_seconds
    }
    time_windows = []
    for _, row in locations_df.iterrows():
        start, end = (t.hour * 3600 + t.minute * 60 for t in (row['time_from'], row['time_to']))
        time_windows.append((start, end))
    depot_start, depot_end = (t.hour * 3600 + t.minute * 60 for t in depot_working_hours)
    time_windows[0] = (depot_start, depot_end)
    data['time_windows'] = time_windows
    return data


def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    processed_data = output.getvalue()
    return processed_data


# ==== –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ü–Ü–î–†–ê–•–£–ù–ö–£ –í–Ü–î–°–¢–ê–ù–Ü ====
def get_solution_routes(data, manager, routing, solution, time_dimension):
    routes_output, routes_data = "", []
    total_dist_actual, active_vehicles = 0, 0

    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        if routing.IsEnd(solution.Value(routing.NextVar(index))): continue

        active_vehicles += 1
        route_distance, route_load, route_nodes_info = 0, 0, []

        while not routing.IsEnd(index):
            node_idx, prev_idx = manager.IndexToNode(index), index
            route_load += data['demands'][node_idx]
            arrival_seconds = solution.Min(time_dimension.CumulVar(index))
            arrival_time = str(timedelta(seconds=int(arrival_seconds)))
            route_nodes_info.append(f"{data['location_names'][node_idx]} (–ø—Ä–∏–±. –æ {arrival_time})")
            index = solution.Value(routing.NextVar(index))
            # –ü—ñ–¥—Å—É–º–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –∑ –º–∞—Ç—Ä–∏—Ü—ñ, –∞ –Ω–µ "–≤–∞—Ä—Ç—ñ—Å—Ç—å" –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∞
            route_distance += data['distance_matrix'][manager.IndexToNode(prev_idx)][manager.IndexToNode(index)]

        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ –¥–µ–ø–æ
        last_node_idx = manager.IndexToNode(routing.Start(vehicle_id))
        index_end = solution.Value(routing.NextVar(routing.Start(vehicle_id)))
        while not routing.IsEnd(index_end):
            prev_idx = index_end
            index_end = solution.Value(routing.NextVar(index_end))
        route_distance += data['distance_matrix'][manager.IndexToNode(prev_idx)][last_node_idx]

        total_dist_actual += route_distance
        arrival_seconds = solution.Min(time_dimension.CumulVar(index))
        arrival_time = str(timedelta(seconds=int(arrival_seconds)))
        route_nodes_info.append(f"{data['location_names'][0]} (–ø–æ–≤. –æ {arrival_time})")

        distance_km = route_distance / 1000.0
        fuel_spent = (distance_km / 100.0) * data['vehicle_fuel_consumptions'][vehicle_id]

        route_text = ' -> '.join(route_nodes_info)
        routes_output += f"üöê **{data['vehicle_names'][vehicle_id]}** ({data['vehicle_capacities'][vehicle_id]}–∫–≥):\n"
        routes_output += f"   - –ú–∞—Ä—à—Ä—É—Ç: **{route_text}**\n"
        routes_output += f"   - –í—ñ–¥—Å—Ç–∞–Ω—å: **{distance_km:.2f} –∫–º**\n"
        routes_output += f"   - –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: **{route_load} –∫–≥**\n"
        routes_output += f"   - –ü–∞–ª–∏–≤–æ: **{fuel_spent:.2f} –ª**\n\n"

        routes_data.append({'vehicle_name': data['vehicle_names'][vehicle_id],
                            'vehicle_capacity': data['vehicle_capacities'][vehicle_id], 'route_text': route_text,
                            'distance_km': distance_km, 'load': route_load, 'fuel_spent': fuel_spent})

    final_report = f"üéØ **–ó–∞–¥—ñ—è–Ω–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤: {active_vehicles}**\n"
    final_report += f"üõ£Ô∏è **–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥: {total_dist_actual / 1000:.2f} –∫–º**\n\n" + routes_output

    return final_report, routes_data, total_dist_actual / 1000


def create_solution_map(gmaps_client, locations_df, data, manager, routing, solution):
    depot_coords = (locations_df.iloc[0]['lat'], locations_df.iloc[0]['lon'])
    route_map = folium.Map(location=depot_coords, zoom_start=12, tiles="cartodbpositron")

    marker_group = folium.FeatureGroup(name="–í—Å—ñ —Ç–æ—á–∫–∏").add_to(route_map)
    for _, location in locations_df.iterrows():
        is_depot = location['id'] == 0
        marker_color = 'red' if is_depot else ('green' if location['type'] == '–î–æ—Å—Ç–∞–≤–∫–∞' else 'orange')
        marker_icon = 'home' if is_depot else ('arrow-down' if location['type'] == '–î–æ—Å—Ç–∞–≤–∫–∞' else 'arrow-up')

        folium.Marker(
            location=(location['lat'], location['lon']),
            popup=f"<b>{location['name']}</b><br>–í–∞–≥–∞: {location['weight']}–∫–≥<br>–¢–∏–ø: {location['type']}",
            tooltip=location['name'],
            icon=folium.Icon(color=marker_color, icon=marker_icon, prefix='fa')
        ).add_to(marker_group)

    colors = ['blue', 'purple', 'darkred', 'cadetblue', 'darkgreen', 'pink']

    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        if routing.IsEnd(solution.Value(routing.NextVar(index))): continue

        vehicle_name = data["vehicle_names"][vehicle_id]
        vehicle_layer = folium.FeatureGroup(name=f"–ú–∞—Ä—à—Ä—É—Ç: {vehicle_name}", show=True).add_to(route_map)

        waypoints = [locations_df.iloc[manager.IndexToNode(routing.Start(vehicle_id))]['address']]
        while not routing.IsEnd(index):
            index = solution.Value(routing.NextVar(index))
            waypoints.append(locations_df.iloc[manager.IndexToNode(index)]['address'])

        if len(waypoints) > 1:
            try:
                directions_result = gmaps_client.directions(origin=waypoints[0], destination=waypoints[-1],
                                                            waypoints=waypoints[1:-1], mode="driving")
                points = polyline.decode(directions_result[0]['overview_polyline']['points'])
                folium.PolyLine(locations=points, color=colors[vehicle_id % len(colors)], weight=5, opacity=0.8,
                                popup=f'–ú–∞—Ä—à—Ä—É—Ç {vehicle_name}').add_to(vehicle_layer)
            except Exception as e:
                st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–≤—Ç–æ {vehicle_name}: {e}")

    folium.LayerControl().add_to(route_map)

    return route_map


# –ë–ª–æ–∫ 3: –ö–æ–¥ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É Streamlit
st.set_page_config(page_title="TMS Pro", layout="wide", initial_sidebar_state="auto")
st.title("–°–∏—Å—Ç–µ–º–∞ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º (TMS Pro)")
db.init_db()

if 'requests' not in st.session_state: st.session_state.requests = []
if 'active_tab' not in st.session_state: st.session_state.active_tab = "üóìÔ∏è **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –†–µ–π—Å—É**"
if st.session_state.get('edit_run_id'):
    run_id_to_edit = st.session_state.edit_run_id
    requests, routes = db.get_run_details(run_id_to_edit)
    st.session_state.requests = []
    for i, req in enumerate(requests):
        st.session_state.requests.append(
            {"id": i + 1, "name": req['name'], "address": req['address'], "type": req['request_type'],
             "weight": req['weight'], "time_from": dt_time.fromisoformat(
                '0' + req['time_from'] if len(req['time_from']) < 5 else req['time_from']),
             "time_to": dt_time.fromisoformat('0' + req['time_to'] if len(req['time_to']) < 5 else req['time_to'])})
    st.session_state.vehicles_to_edit = [r['vehicle_name'] for r in routes]
    db.delete_run(run_id_to_edit)
    del st.session_state.edit_run_id
    st.session_state.active_tab = "üóìÔ∏è **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –†–µ–π—Å—É**"
    st.toast(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ —Ä–µ–π—Å—É ‚Ññ{run_id_to_edit} –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.", icon="‚úèÔ∏è")
    st.rerun()

st.sidebar.header("‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
api_key = st.sidebar.text_input("üîë Google Maps API –∫–ª—é—á", type="password")
st.sidebar.markdown("---")
st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
service_time_minutes = st.sidebar.number_input("–ß–∞—Å –Ω–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è (—Ö–≤)", min_value=0, value=20)
working_hours = st.sidebar.slider("–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –∞–≤—Ç–æ–ø–∞—Ä–∫—É", value=(dt_time(8, 0), dt_time(18, 0)),
                                  step=timedelta(minutes=30))
st.sidebar.subheader("–ï–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
base_vehicle_cost = st.sidebar.number_input("–ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–ª—É—á–µ–Ω–Ω—è –∞–≤—Ç–æ (–≤ –∫–º)", min_value=0, value=20, step=5,
                                            help="–§—ñ–∫—Å–æ–≤–∞–Ω–∏–π '—à—Ç—Ä–∞—Ñ' –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ –∞–≤—Ç–æ.")
capacity_cost_coefficient = st.sidebar.number_input("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–∞—Ä—Ç–æ—Å—Ç—ñ –≤—ñ–¥ –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω–æ—Å—Ç—ñ", min_value=0.0,
                                                    value=2.0, step=0.1, format="%.1f",
                                                    help="–î–æ–¥–∞—Ç–∫–æ–≤–∏–π '—à—Ç—Ä–∞—Ñ' –∑–∞ –∫–æ–∂–Ω—ñ 1000 –∫–≥ –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω–æ—Å—Ç—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 2.0 –æ–∑–Ω–∞—á–∞—î +2 –∫–º –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞ –∫–æ–∂–Ω—É —Ç–æ–Ω–Ω—É.")

tab1, tab2, tab3, tab4 = st.tabs(
    ["üóìÔ∏è **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –†–µ–π—Å—É**", "üìä **–Ü—Å—Ç–æ—Ä—ñ—è –†–µ–π—Å—ñ–≤**", "üöõ **–°—Ç–∞—Ç—É—Å –ê–≤—Ç–æ–ø–∞—Ä–∫—É**", "‚õΩ **–ó–≤—ñ—Ç –ø–æ –ü–∞–ª–∏–≤—É**"])

with tab1:
    st.header("–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–µ–π—Å—É")
    c_date, c_traffic = st.columns(2)
    selected_date = c_date.date_input("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É", datetime.now())
    depot_address = st.text_input("–ê–¥—Ä–µ—Å–∞ –¥–µ–ø–æ:", "–º. –ö–∏—ó–≤, –≤—É–ª. –ü–∏—Ä–æ–≥—ñ–≤—Å—å–∫–∏–π —à–ª—è—Ö, 135")
    use_traffic = st.toggle("–í—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫", value=True)
    st.markdown("---")

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–∞ –∑–∞–±—ñ—Ä")
        if st.button("üß™ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"):
            st.session_state.requests = [
                {'id': 1, 'name': '–ï–ø—ñ—Ü–µ–Ω—Ç—Ä –ö', 'address': '–º. –ö–∏—ó–≤, –≤—É–ª. –ü–æ–ª—è—Ä–Ω–∞, 20–î', 'type': '–î–æ—Å—Ç–∞–≤–∫–∞',
                 'weight': 1200, 'time_from': dt_time(9, 0), 'time_to': dt_time(12, 0)},
                {'id': 2, 'name': '–°–∫–ª–∞–¥ \'–†–æ–∑–µ—Ç–∫–∞\'', 'address': '–º. –ö–∏—ó–≤, –ø—Ä–æ—Å–ø–µ–∫—Ç –°—Ç–µ–ø–∞–Ω–∞ –ë–∞–Ω–¥–µ—Ä–∏, 34–í',
                 'type': '–î–æ—Å—Ç–∞–≤–∫–∞', 'weight': 850, 'time_from': dt_time(10, 0), 'time_to': dt_time(14, 0)},
                {'id': 3, 'name': '–¢–†–¶ \'Ocean Plaza\'', 'address': '–º. –ö–∏—ó–≤, –≤—É–ª. –ê–Ω—Ç–æ–Ω–æ–≤–∏—á–∞, 176', 'type': '–î–æ—Å—Ç–∞–≤–∫–∞',
                 'weight': 500, 'time_from': dt_time(11, 0), 'time_to': dt_time(17, 0)},
                {'id': 4, 'name': '–ö–∞—Ñ–µ \'Urban Space\'', 'address': '–º. –ö–∏—ó–≤, –≤—É–ª. –ë–æ—Ä–∏—Å–∞ –ì—Ä—ñ–Ω—á–µ–Ω–∫–∞, 9',
                 'type': '–î–æ—Å—Ç–∞–≤–∫–∞', 'weight': 150, 'time_from': dt_time(9, 0), 'time_to': dt_time(11, 0)},
                {'id': 5, 'name': '–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è (Arena City)', 'address': '–º. –ö–∏—ó–≤, –≤—É–ª. –í–µ–ª–∏–∫–∞ –í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞, 1-3/2',
                 'type': '–ó–∞–±—ñ—Ä', 'weight': 300, 'time_from': dt_time(14, 0), 'time_to': dt_time(16, 0)},
                {'id': 6, 'name': '–ù–æ–≤–∞ –ü–æ—à—Ç–∞ ‚Ññ1', 'address': '–º. –ö–∏—ó–≤, –°—Ç–æ–ª–∏—á–Ω–µ —à–æ—Å–µ, 103', 'type': '–î–æ—Å—Ç–∞–≤–∫–∞',
                 'weight': 700, 'time_from': dt_time(13, 0), 'time_to': dt_time(18, 0)}]
            st.rerun()

        with st.form("request_form", clear_on_submit=True):
            req_name = st.text_input("–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞")
            req_address = st.text_input("–ê–¥—Ä–µ—Å–∞")
            req_type = st.radio("–¢–∏–ø –∑–∞—è–≤–∫–∏:", ('–î–æ—Å—Ç–∞–≤–∫–∞', '–ó–∞–±—ñ—Ä'), horizontal=True)
            c1f, c2f = st.columns(2)
            req_weight = c1f.number_input("–í–∞–≥–∞ (–∫–≥)", min_value=1, step=1)
            req_time_window = c2f.slider("–ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ", value=(dt_time(9, 0), dt_time(17, 0)))
            if st.form_submit_button("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É"):
                new_id = max([req['id'] for req in st.session_state.requests] + [0]) + 1
                st.session_state.requests.append(
                    {"id": new_id, "name": req_name, "address": req_address, "type": req_type, "weight": req_weight,
                     "time_from": req_time_window[0], "time_to": req_time_window[1]})
                st.rerun()
        if st.session_state.requests:
            st.write("–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:");
            st.session_state.requests = st.data_editor(pd.DataFrame(st.session_state.requests), num_rows="dynamic",
                                                       use_container_width=True).to_dict('records')

    with col2:
        st.subheader("–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–∞ —Ä–µ–π—Å—ñ")
        all_vehicles, assigned_vehicles = db.get_saved_vehicles(), db.get_assigned_vehicles_for_date(selected_date)
        available_vehicles = [v for v in all_vehicles if v['name'] not in assigned_vehicles]
        default_selection = []
        if 'vehicles_to_edit' in st.session_state:
            default_selection = [v['name'] for v in all_vehicles if v['name'] in st.session_state.vehicles_to_edit]
            vehicles_in_edit_run = [v for v in all_vehicles if v['name'] in st.session_state.vehicles_to_edit]
            available_vehicles.extend(vehicles_in_edit_run)
            available_vehicles = [dict(t) for t in {tuple(d.items()) for d in available_vehicles}]
            del st.session_state.vehicles_to_edit
        if not available_vehicles: st.warning(f"–ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –∞–≤—Ç–æ.")
        vehicle_options = {f"{v['name']} ({v['capacity']}–∫–≥, {v['fuel_consumption']:.1f}–ª/100–∫–º)": v for v in
                           available_vehicles}
        selected_vehicles_keys = st.multiselect("–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–ª—å–Ω—ñ –∞–≤—Ç–æ:", options=vehicle_options.keys(),
                                                default=[k for k, v in vehicle_options.items() if
                                                         v['name'] in default_selection])
        vehicles_for_run = [vehicle_options[key] for key in selected_vehicles_keys]

    st.markdown("---")

    if st.button("üöÄ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–π—Å", type="primary", use_container_width=True):
        if not api_key:
            st.warning("–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á –≤ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ.")
        elif not st.session_state.requests:
            st.warning("–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É –∑–∞—è–≤–∫—É.")
        elif not vehicles_for_run:
            st.warning("–í–∏–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±—ñ–ª—å.")
        else:
            depot_df = pd.DataFrame([{"id": 0, "name": "–î–µ–ø–æ", "address": depot_address, "type": "–î–µ–ø–æ", "weight": 0,
                                      "time_from": working_hours[0], "time_to": working_hours[1]}])
            locations_df = pd.concat([depot_df, pd.DataFrame(st.session_state.requests)], ignore_index=True)

            gmaps, locs_upd, dist_matrix, dur_matrix = get_api_data(api_key, locations_df, use_traffic)
            if locs_upd is not None:
                with st.spinner('–ü–æ—à—É–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤...'):
                    vehicles_df = pd.DataFrame(vehicles_for_run)
                    data = create_data_model(locs_upd, vehicles_df, dist_matrix, dur_matrix, service_time_minutes * 60,
                                             working_hours)
                    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']), data['num_vehicles'],
                                                           data['depot'])
                    routing = pywrapcp.RoutingModel(manager)

                    for i, vehicle in enumerate(vehicles_for_run):
                        cost = int(
                            (base_vehicle_cost + (vehicle['capacity'] / 1000.0) * capacity_cost_coefficient) * 1000)
                        routing.SetFixedCostOfVehicle(cost, i)

                    dist_cb = routing.RegisterTransitCallback(
                        lambda f, t: data['distance_matrix'][manager.IndexToNode(f)][manager.IndexToNode(t)])
                    routing.SetArcCostEvaluatorOfAllVehicles(dist_cb)


                    def demand_callback(from_index):
                        node = manager.IndexToNode(from_index)
                        return abs(data['demands'][node])


                    demand_cb_idx = routing.RegisterUnaryTransitCallback(demand_callback)
                    routing.AddDimensionWithVehicleCapacity(demand_cb_idx, 0, data['vehicle_capacities'], True,
                                                            'Capacity')

                    time_cb = routing.RegisterTransitCallback(lambda f, t: int(
                        data['duration_matrix'][manager.IndexToNode(f)][manager.IndexToNode(t)] + data['service_time']))
                    routing.AddDimension(time_cb, 3600, 24 * 3600, False, "Time")
                    time_dim = routing.GetDimensionOrDie("Time")
                    for loc_idx, time_win in enumerate(data['time_windows']):
                        if loc_idx != 0: time_dim.CumulVar(manager.NodeToIndex(loc_idx)).SetRange(int(time_win[0]),
                                                                                                  int(time_win[1]))
                    for i in range(data['num_vehicles']): time_dim.CumulVar(routing.Start(i)).SetRange(
                        int(data['time_windows'][0][0]), int(data['time_windows'][0][1]))

                    params = pywrapcp.DefaultRoutingSearchParameters()
                    params.first_solution_strategy = routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC
                    params.local_search_metaheuristic = routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH
                    params.time_limit.FromSeconds(20)
                    solution = routing.SolveWithParameters(params)

                if solution:
                    st.success("–†–µ–π—Å —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                    run_id = db.create_run(selected_date)
                    db.save_requests_for_run(run_id, st.session_state.requests)
                    solution_text, routes_data, total_dist = get_solution_routes(data, manager, routing, solution,
                                                                                 time_dim)
                    st.markdown(solution_text)
                    st.subheader("–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç—ñ–≤:")
                    st_folium(create_solution_map(gmaps, locs_upd, data, manager, routing, solution), width='100%',
                              height=500, returned_objects=[])
                    total_fuel = db.save_routes_for_run(run_id, routes_data)
                    db.update_run_totals(run_id, total_dist, total_fuel)
                    st.session_state.requests = []
                    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–µ–π—Å—ñ–≤"): st.rerun()
                else:
                    st.error(
                        "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∞–≤—Ç–æ –∞–±–æ –∑–±—ñ–ª—å—à–∏—Ç–∏ —á–∞—Å–æ–≤—ñ –≤—ñ–∫–Ω–∞.")

# –í–∫–ª–∞–¥–∫–∏ "–Ü—Å—Ç–æ—Ä—ñ—è", "–°—Ç–∞—Ç—É—Å" —Ç–∞ "–ó–≤—ñ—Ç –ø–æ –ø–∞–ª–∏–≤—É"
with tab2:
    st.header("–ê—Ä—Ö—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç—É—Å–∏ —Ä–µ–π—Å—ñ–≤")
    all_runs = db.get_all_runs()
    if not all_runs:
        st.info("–Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–π—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
    else:
        df_runs = pd.DataFrame([dict(r) for r in all_runs])
        st.download_button("üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ Excel", to_excel(df_runs), file_name="runs_history.xlsx")
        for run in all_runs:
            with st.expander(
                    f"**–†–µ–π—Å ‚Ññ{run['id']}** –≤—ñ–¥ **{datetime.strptime(run['run_date'], '%Y-%m-%d').strftime('%d.%m.%Y')}** | –°—Ç–∞—Ç—É—Å: **{run['status']}**"):
                requests, routes = db.get_run_details(run['id'])
                st.subheader("–ó–∞—è–≤–∫–∏:");
                st.dataframe(
                    pd.DataFrame(requests, columns=['name', 'address', 'type', 'weight', 'time_from', 'time_to']),
                    use_container_width=True)
                st.subheader("–ú–∞—Ä—à—Ä—É—Ç–∏:")
                for route in routes: st.markdown(
                    f"**{route['vehicle_name']}**: {route['route_text']} (–ü–∞–ª–∏–≤–æ: {route['fuel_spent']:.2f} –ª)")
                st.markdown("---")
                if run['status'] == '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ':
                    c1, c2, c3 = st.columns(3)
                    if c1.button("‚ñ∂Ô∏è –†–æ–∑–ø–æ—á–∞—Ç–∏", key=f"start_{run['id']}", type="primary"): db.update_run_status(
                        run['id'], "–í –¥–æ—Ä–æ–∑—ñ"); st.rerun()
                    if c2.button("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", key=f"edit_{run['id']}"):
                        st.session_state.edit_run_id = run['id']
                        st.rerun()
                    if c3.button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", key=f"delete_{run['id']}"):
                        db.delete_run(run['id'])
                        st.toast(f"–†–µ–π—Å ‚Ññ{run['id']} –≤–∏–¥–∞–ª–µ–Ω–æ.", icon="üóëÔ∏è")
                        st.rerun()
                elif run['status'] == '–í –¥–æ—Ä–æ–∑—ñ':
                    if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", key=f"end_{run['id']}", type="primary"): db.update_run_status(run['id'],
                                                                                                              "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"); st.rerun()

with tab3:
    st.header("–û–≥–ª—è–¥ –∑–∞–π–Ω—è—Ç–æ—Å—Ç—ñ –∞–≤—Ç–æ–ø–∞—Ä–∫—É")
    status_date = st.date_input("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É", datetime.now(), key="status_date")
    all_vehicles, assigned_vehicles = db.get_saved_vehicles(), db.get_assigned_vehicles_for_date(status_date)
    st.subheader(f"–°—Ç–∞—Ç—É—Å –Ω–∞ {status_date.strftime('%d.%m.%Y')}:")
    for vehicle in all_vehicles:
        status_text = "–ó–∞–π–Ω—è—Ç–∏–π" if vehicle['name'] in assigned_vehicles else "–í—ñ–ª—å–Ω–∏–π"
        status_icon = "üî¥" if vehicle['name'] in assigned_vehicles else "üü¢"
        st.markdown(f"{status_icon} **{vehicle['name']}** - **{status_text}**")

    with st.expander("‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏–º –∞–≤—Ç–æ–ø–∞—Ä–∫–æ–º"):
        with st.form("vehicle_form_manage", clear_on_submit=True):
            veh_name = st.text_input("–ù–∞–∑–≤–∞/–Ω–æ–º–µ—Ä")
            c1, c2 = st.columns(2)
            veh_capacity = c1.number_input("–í–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å (–∫–≥)", min_value=1, value=1000)
            veh_fuel = c2.number_input("–í–∏—Ç—Ä–∞—Ç–∞ (–ª/100–∫–º)", min_value=1.0, value=10.0, step=0.1, format="%.1f")
            if st.form_submit_button("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∞–≤—Ç–æ–ø–∞—Ä–∫—É"):
                if veh_name and veh_capacity > 0: db.add_vehicle_to_db(veh_name, veh_capacity, veh_fuel); st.rerun()
        st.subheader("–ù–∞—è–≤–Ω–∏–π –∞–≤—Ç–æ–ø–∞—Ä–∫")
        for vehicle in all_vehicles:
            c1, c2 = st.columns([4, 1])
            c1.write(f"**{vehicle['name']}** ({vehicle['capacity']}–∫–≥, {vehicle['fuel_consumption']:.1f}–ª/100–∫–º)")
            if c2.button("‚ùå", key=f"del_main_{vehicle['id']}", help="–í–∏–¥–∞–ª–∏—Ç–∏"): db.delete_vehicle_from_db(
                vehicle['id']); st.rerun()

with tab4:
    st.header("–ó–≤—ñ—Ç –ø–æ –≤–∏—Ç—Ä–∞—Ç–∞—Ö –ø–∞–ª–∏–≤–∞")
    st.write("–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–π—Å—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'.")
    today = datetime.now()
    c1, c2 = st.columns(2)
    start_date, end_date = c1.date_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞", today - timedelta(days=30)), c2.date_input("–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞",
                                                                                                      today)
    if st.button("üìà –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç"):
        report_data = db.get_fuel_report(start_date, end_date)
        if not report_data:
            st.info("–ó–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ä–µ–π—Å–∞—Ö.")
        else:
            report_df = pd.DataFrame(report_data, columns=['vehicle_name', 'total_fuel', 'total_distance'])
            st.download_button("üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ Excel", to_excel(report_df),
                               file_name=f"fuel_report_{start_date}_to_{end_date}.xlsx")
            c1, c2 = st.columns(2)
            c1.metric("–ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞", f"{report_df['total_fuel'].sum():.2f} –ª")
            c2.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å", f"{report_df['total_distance'].sum():.2f} –∫–º")
            st.subheader("–î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è—Ö:")
            st.dataframe(report_df.style.format({'total_fuel': '{:.2f} –ª', 'total_distance': '{:.2f} –∫–º'}),
                         use_container_width=True)
            st.subheader("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç –ø–∞–ª–∏–≤–∞:")
            st.bar_chart(report_df.set_index('vehicle_name')[['total_fuel']])